#+TITLE: A nicer numpy
#+AUTHOR: Dima Kogan

#+LaTeX_HEADER: \setbeamertemplate{navigation symbols}{}
#+OPTIONS: toc:nil

* comment                                                          :noexport:

# + LaTeX_HEADER: \newcommand{\argmin}{\operatornamewithlimits{argmin}}
# +LATEX_CLASS_OPTIONS: [presentation]

* What is this about?
Two libraries to make working in numpy nicer.

- These are public tools, available for some years
- Installable from Debian and related distros.
- Python2 and Python3 both supported

** numpysane (https://github.com/dkogan/numpysane)
- Nicer array manipulation
- Nicer basic linear algebra routines
- Broadcasting support

** gnuplotlib (https://github.com/dkogan/gnuplotlib)
- Plotting

** notes                                                           :noexport:

- Slides linked at the above URLs
- Talk about some tools I wrote to solve my problems. The things I work on
  aren't that different from the things many other people work on, so sharing
  could be useful

- Have been out for a while, but I haven't done much proselytizing until now.

- I use these all the time for all sorts of things

- There's plenty of documentation online, so I'll give a very quick overview of
  the APIs, and then show some demos.

* What's wrong with numpy?
- Some very core functionality is mysterious and unintuitive.
- Things work as expected /only/ with 2-dimensional arrays, no more and no less.

Areas addressed by =numpysane=:

- Nicer array manipulation
- Nicer basic linear algebra routines
- Broadcasting support

** notes                                                           :noexport:

I used perl and PDL (http://pdl.perl.org/) for many years. Solid core. Not very
widely used. Not a lot of library support.

Eventually I moved to python and numpy to discover that both aren't nearly as
nice as they were made out to be. numpy's issues are complementary to PDL: it
has lots of users and lots of libraries, but the core functionality isn't great.

Many of the issues stem from a fundamental design assumption that everybody has
only has 2-dimensional arrays.

I'll briefly describe the issues and solutions. More is available in the
documentation

* Matrix concatenation
Very easy example: stick two identical 2D arrays together

- The docs say to use =hstack()= or =vstack()= or =dstack()=

#+BEGIN_EXAMPLE
>>> import numpy as np
>>> arr32 = np.arange(3*2).reshape(3,2)
>>> print(arr32)
[[0 1]
 [2 3]
 [4 5]]

>>> print(arr32.shape)
(3, 2)
#+END_EXAMPLE

* Matrix concatenation
What do we expect =hstack(arr32,arr32)= to do?

#+BEGIN_EXAMPLE
[[0 1 0 1]
 [2 3 2 3]
 [4 5 4 5]]
#+END_EXAMPLE

or

#+BEGIN_EXAMPLE
[[0 1]
 [2 3]
 [4 5]
 [0 1]
 [2 3]
 [4 5]]
#+END_EXAMPLE

** notes                                                           :noexport:
These are "horizontal" and "vertical" and "depth". I'd argue that if you have
N-dimensional arrays, these words have limited meaning, but that's what numpy
does. And what if you want the 4th dimension? I'm convinced that nobody knows
how to use these functions. Let's try

* Matrix concatenation
This was a trick question. Here's what it does:

#+BEGIN_EXAMPLE
>>> np.hstack(arr32,arr32)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: hstack() takes 1 positional argument ...
    ... but 2 were given
#+END_EXAMPLE

Apparently =hstack()= wants an iterable of the arguments, instead of the
arguments themselves

* Matrix concatenation
Fine. Here's what it does if you feed it what it wants:

#+BEGIN_EXAMPLE
>>> print(np.hstack((arr32,arr32)))
[[0 1 0 1]
 [2 3 2 3]
 [4 5 4 5]]
#+END_EXAMPLE

Whew. That makes sense! Looks "horizontal".

* Matrix concatenation
What if I don't feed it strictly 2D matrices?

#+BEGIN_EXAMPLE
>>> arr132 = np.arange(3*2).reshape(1,3,2)
>>> print(arr132)
[[[0 1]
  [2 3]
  [4 5]]]

>>> print(arr132.shape)
(1, 3, 2)
#+END_EXAMPLE

* Matrix concatenation
Same question as before: what do we expect =hstack((arr132,arr132))= to do?

#+BEGIN_EXAMPLE
[[[0 1 0 1]
  [2 3 2 3]
  [4 5 4 5]]]
#+END_EXAMPLE

or

#+BEGIN_EXAMPLE
[[[0 1]
  [2 3]
  [4 5]
  [0 1]
  [2 3]
  [4 5]]]
#+END_EXAMPLE

or something else?

* Matrix concatenation
Here's what it does:

#+BEGIN_EXAMPLE
>>> print(np.hstack((arr132,arr132)))
[[[0 1]
  [2 3]
  [4 5]
  [0 1]
  [2 3]
  [4 5]]]

>>> np.hstack((arr132,arr132)).shape
(1, 6, 2)
#+END_EXAMPLE

Whoa. That is /not/ horizontal at all! I would have expected a result with shape
=(1,3,4)=

* Matrix concatenation
What if I give it 1-dimensional arrays?

#+BEGIN_EXAMPLE
>>> arr3  = np.arange(3)
>>> arr13 = np.arange(3).reshape(1,3)
>>> print(arr3)
[0 1 2]

>>> arr3.shape
(3,)

>>> print(arr13)
[[0 1 2]]

>>> arr13.shape
(1, 3)
#+END_EXAMPLE

* Matrix concatenation
#+BEGIN_EXAMPLE
>>> np.hstack((arr3,arr3)).shape
(6,)

>>> np.hstack((arr13,arr13)).shape
(1, 6)

>>> np.hstack((arr13,arr3)).shape
ValueError: all the input arrays must have ...
    ... same number of dimensions
#+END_EXAMPLE

Looks like the easy 1D cases work reasonably well, but it can't

#+BEGIN_EXAMPLE
hstack([[0 1 2]],   [0 1 2])
#+END_EXAMPLE

I claim it /should/ be able to do this, and will justify it later. And other
functions such as =vstack()= do accept arrays with uneven input dimensions.

* Matrix concatenation
So what's wrong?

- *numpy is inconsistent about which is the most significant dimension in an
  array*

- There's an arbitrary design choice that must be made: if I stack =N= arrays of
  shape =(A,B,C)= into a new array, do I get an array of shape =(N,A,B,C)= or
  =(A,B,C,N)=?

- Most of numpy makes the /first/ choice, but some of it (concatenation
  functions most notably) makes the second choice

* Dimensionality example
Example:

- Let's say I have a 1-dimensional array containing simultaneous temperature
  measurements at different locations:

#+BEGIN_EXAMPLE
>>> print(temperatures)
[ t_place0 t_place1 t_place2 ... ]

>>> print(temperatures.shape)
(Nlocations,)

#+END_EXAMPLE

To access temperatures at different locations in this array, I look along the
first dimension (=axis = 0=). This is a 1-dimensional array, so that's also the
last dimension (=axis = -1=).

* Dimensionality example
Let's now say I have measured all the temperatures multiple times throughout the
day, and I make a joint array using the /first/ convention above

#+BEGIN_EXAMPLE
>>> print(temperatures)
[[ t_time0place0 t_time0place1 t_time0place2 ... ]
 [ t_time1place0 t_time1place1 t_time1place2 ... ]
 ...]

>>> print(temperatures.shape)
(Ntimes, Nlocations)
#+END_EXAMPLE

- I want to use the same axis index to access different locations
- If I count dimensions from the end, I can do that: =axis = -1= refers to the
  different locations in both cases
- But if I count dimensions from the front, this doesn't work: locations /were/
  at =axis = 0= but now they're at =axis = 1=

** notes                                                           :noexport:
Now let's say I have measured the temperatures multiple times throughout the
day, and I make a joint array using the first convention above

To access the temperatures at different locations in /this/ array I'd like to be
able to use the same axis index. If I count dimensions from the end, I can do
this: =axis = -1= refers to the different locations here and before.

But if I count dimensions from the front, this doesn't work: locations /were/ at
=axis = 0= but now they're at =axis = 1=.

* Dimensionality example
If I used the /second/ convention above to produce an array of shape
=(Nlocations, Ntimes)= then the locations are at =axis = 0= in both cases. /But/
the arrays would be printed differently:

- the location axis would be printed horizontally in the 1D array, and
  vertically in the 2D array

So:

- numpy printing effectively counts dimensions from the back
- =hstack()= counts dimensions from the front. It /should be/ concatenating
  along =axis = -1= (the last one)
- But instead in concatenates along =axis = 1= (the 2nd one) with special-case
  rules about what to do with 1-dimensional arrays that don't have a 2nd axis
- For 2D arrays the 2nd axis /is/ the last axis, but for 3D arrays it isn't

** notes                                                           :noexport:
I can keep pointing out issues in these functions for a long time, but that's
not useful: they're all broken.

Fundamental issue: an inconsistent dimensionality convention.

The way arrays are printed, the innermost dimension is the /last/ one: the
dimension printed horizontal is =axis = -1=. So axes should be counted from the
end. But the numpy functions for concatenation count them from the front.

* Matrix concatenation with numpysane
There are two functions, both stolen from the PDL project.

- =glue()= concatenates any N arrays along the given axis
- =cat()= concatenates N arrays along a new outer dimension

These both add leading length-1 dimensions to the input as needed: "something"
is logically equivalent to "1 of something". This is one of the /broadcasting/
rules I'll get to in a bit

** notes                                                           :noexport:
Nothing is "horizontal" or "vertical". axes should be given from the end
(axis<0). Some functions actually require this: glue(axis>=0) will barf

* Matrix concatenation with numpysane
=nps.glue()= works as expected:

#+BEGIN_EXAMPLE
>>> import numpysane as nps

>>> nps.glue(arr32, arr32,  axis=-1).shape
(3, 4)

>>> nps.glue(arr32, arr32,  axis=-2).shape
(6, 2)

>>> nps.glue(arr132,arr132, axis=-1).shape
(1, 3, 4)

>>> nps.glue(arr13, arr3,   axis=-1).shape
(1, 6)

>>> nps.glue(arr13, arr3,   axis=-2).shape
(2, 3)
#+END_EXAMPLE

* Matrix concatenation with numpysane
=nps.cat()= works as expected too. It always adds a new leading dimension

#+BEGIN_EXAMPLE
>>> nps.cat(arr32,arr32).shape
(2, 3, 2)

>>> nps.cat(arr132,arr32).shape
(2, 1, 3, 2)
#+END_EXAMPLE

* Matrix multiplication
The funny business extends to other core areas of numpy. For instance
multiplying matrices is non-trivial

- Up until numpy 1.10.0 =np.dot()= was the function for that, and it is
  surprising in all sorts of ways
- In 1.10.0 we got =np.matmul=, which is /much/ better, but even then it has
  strange corners. Trying to compute an outer product:

#+BEGIN_EXAMPLE
>>> a = np.arange(5).reshape(5,1)
>>> b = np.arange(3)

>>> np.matmul(a,b)
ValueError: matmul: Input operand 1 has a mismatch in
   its core dimension 0, with gufunc signature
   (n?,k),(k,m?)->(n?,m?) (size 3 is different from 1)
#+END_EXAMPLE

* Matrix multiplication with numpysane
numpysane provides its own =matmult()= routine that does what one expects:

#+BEGIN_EXAMPLE
>>> nps.matmult(a,b).shape

(5, 3)
#+END_EXAMPLE

There're many more functions in numpysane in this area. Everything's documented,
and I'd like to move on to...

* Broadcasting
What is broadcasting?

- /Broadcasting/ is a generic way to vectorize functions
- A broadcasting-aware function has a /prototype/: it knows the dimensionality
  of its inputs and of its outputs
- When calling a broadcasting-aware function, any extra dimensions in the input
  are automatically used for vectorization

* Broadcasting: an example
This is best described with an example: a broadcasting-aware innner product. An
inner product (also known as a dot product) is a function that

- takes in two identically-sized 1-dimensional arrays
- outputs a scalar

If one calls a broadcasting-aware inner product with two arrays of shape (2,3,4)
as input, it would

- compute 6 inner products of length-4 each
- report the output in an array of shape (2,3)

Because =nps.inner()= knows the dimensionality of its inputs and of its outputs,
it can figure out how to parse the input arrays

* Broadcasting: an example
#+BEGIN_EXAMPLE
>>> a234 = np.arange(2*3*4).reshape(2,3,4)

>>> print(a234)
[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]

 [[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]]

>>> print(nps.inner(a234,a234))
[[  14  126  366]
 [ 734 1230 1854]]
#+END_EXAMPLE

The values in the output are =inner([0,1,2,3], [0,1,2,3])= and
=inner([4,5,6,7],[4,5,6,7])= and so on.

* What about the stock broadcasting support?
What stock broadcasting support?
- It's sparse and incomplete
- Little end-user awareness that it exists

* Broadcasting rules
In short:

- Line up the shapes of the inputs to their /trailing/ dimensions
- Match the trailing dimensions with the expected shapes of the inputs
- Any leading dimensions left over are used for vectorization
- The extra leading dimensions must be compatible across all the inputs. This
  means that each leading dimension must either
  - equal 1
  - be missing (thus assumed to equal 1)
  - equal to some positive integer >1, consistent across all arguments
- The leading dimensions of the inputs determine the shape of the output

* Broadcasting: an example
Let's write a broadcasting-aware inner product.

#+BEGIN_EXAMPLE
import numpysane as nps
@nps.broadcast_define( (('n',), ('n',)), () )
def inner(a,b):
    # We could use numpy for this: return a.dot(b)
    sum = 0.
    for i in range(len(a)): sum += a[i]*b[i]
    return sum
#+END_EXAMPLE

* Broadcasting: an example
- We wrote a function =inner(a,b)= that computes /one/ inner product. It knows
  nothing about vectorization
- And it can assume that =a= and =b= are 1-dimensional arrays of the same length
- Then we used the =nps.broadcast_define()= decorator to add broadcasting
  awareness to this function
- The decorator is told that there are 2 inputs, that have dimensions =('n',)=
  each. It's the same =n= for both of them, so ...
- the internal =nps.broadcast_define()= machinery will make sure that the
  /last/ dimension of both inputs matches
- If we call =inner()= with more than 1-dimensional input, we'll get multiple
  inner products computed, and an array of output returned

* Broadcasting: an example
So we can give it two arrays, and get inner products of each corresponding row:

#+BEGIN_EXAMPLE
>>> a234 = np.arange(2*3*4).reshape(2,3,4)

>>> print(inner(a234,a234).shape)
(2,3)
#+END_EXAMPLE

Or we can compute the inner product or each row of one array to some arbitrary
vector

#+BEGIN_EXAMPLE
>>> a234 = np.arange(2*3*4).reshape(2,3,4)
>>> a4   = np.arange(4)

>>> print(inner(a234,a4).shape)
(2,3)
#+END_EXAMPLE

* Broadcasting: more involved example
Let's say we have a function with input prototype

- =( (3,), ('n',3), ('n',), ('m',) )=

given inputs of shape

#+BEGIN_EXAMPLE
  (1,5,    3)
  (2,1,  8,3)
  (        8)
  (  5,    9)
#+END_EXAMPLE

The broadcasting logic will set =n = 8= and =m = 9=.

The call will return an output array of shape (2,5, ...), where ... is the shape
of each output slice.

* Broadcasting: summary
- This is a very powerful technique. The =nps.broadcast_define()= decorator is
  written in Python and wraps Python code. With lots of iterations this is
  /slow/.

- A much faster analogue exists in C: =nps.numpysane_pywrap()=. The iteration
  code and the code for the inner function are all in C, so this is fast. Please
  see the documentation for more detail.

- A stock nump broadcasting-in-C API exists:

  https://docs.scipy.org/doc/numpy-1.13.0/reference/c-api.generalized-ufuncs.html

  I found this after implementing my own, and have not tried it.

* Plotting
Let's switch gears, and talk about plotting.

- As with the numpy core, there's a dominant choice here: matplotlib
- It's workable, but I don't want a new backend
- It's slow
- It has a weird API
- It's specific to python and numpy

** notes                                                           :noexport:
As you can imagine, at this point I was getting peeved. Trying to make plots
didn't help matters at all

Another thing that was very jarring was the plotting situation. Slow. No
interactivity. Fewer backends. Weird API. NONSTANDARD api. The world is much
bigger than python, and there's no reason that plots made from numpy should work
any differently from plots made with any other tool. At this point I've used
gnuplot for decades, and have been very happy with it. So I ported over the PDL
plotting library to numpy, using gnuplot as a backend.

* gnuplotlib
I've used gnuplot for decades, and very much want to keep using it for numpy:

I do a /lot/ of plotting most of it outside of Python, and there's absolutely no
reason why my Python plots should work any differently from the rest of them.

So I wrote gnuplotlib, a port of the =PDL::Graphics::Gnuplot= library (that I
also wrote, originally).

* gnuplotlib design choices
Similar to feedgnuplot: hands-off styling

Easy learning curve

One function to make plots()

argument accumulation can be done in python

** notes                                                           :noexport:
Similar design choices as with feedgnuplot: the sysmtem is as hands-off as
possible. Any styling directives are passed on to gnuplot directly.

There's one class gnuplotlib: one instance is one gnuplot process and one plot
window. There's one plotting function.

The various datasets and directives are all given to this one function with one
function call. If we need to gather many arguments to make a complicated plot,
we can build them up using the language we already have: python. This is in
contrast to how matplotlib does it, where you make multiple function calls to do
anything, and thus there's an API to learn.

* gnuplotlib startup                                               :noexport:

#+BEGIN_SRC python :python python3 :results none :session gnuplotlib-talk
import numpy      as np
import numpysane  as nps
import gnuplotlib as gp

def output():
    global output_file
    return dict(output = output_file,
                terminal = 'pdfcairo solid color font ",20" size 11in,5in')

#+END_SRC

* gnuplotlib

To plot something, just call plot:

#+BEGIN_SRC python :python python3 :exports both :results file link :session gnuplotlib-talk :file "demo-line600.pdf" :var output_file="demo-line600.pdf"
x = np.arange(50)
gp.plot(x, **output())
#+END_SRC

#+RESULTS:
[[file:demo-line600.pdf]]

* gnuplotlib
The structure of the arguments is

#+BEGIN_EXAMPLE
gp.plot( dataset, dataset, dataset, ... kwarg_options )
#+END_EXAMPLE

Each dataset is a tuple. If we have just one dataset, we can inline it, which we
did above. A more explicit call would be

#+begin_example
gp.plot( (x,), wait=True)
#+end_example

And I can add more datasets by adding more tuples:

#+begin_example
gp.plot( (x,),
         (15. * np.sin(x/5.),),
         wait=True)
#+end_example

plot options (applying to the whole plot) go into the kwargs:

#+begin_example
gp.plot( (x,),
         (15. * np.sin(x/5.),),
         unset='grid',
         title='Sample',
         xlabel='X',
         wait=True)
#+end_example

Dataset options go into a dict at the end of each tuple

#+begin_example
gp.plot( (x, dict(_with = 'lines')),
         (15. * np.sin(x/5.), dict(_with = 'points pt 7 ps 2')),
         unset='grid',
         title='Sample',
         xlabel='X',
         wait=True)
#+end_example

* the rest                                                         :noexport:

Dataset options can go into the outer kwargs, to serve as the defaults for each
dataset:

#+begin_example
gp.plot( (x, dict(_with = 'lines')),
         (15. * np.sin(x/5.),),
         unset='grid',
         title='Sample',
         xlabel='X',
         _with = 'points pt 7 ps 2',
         wait=True)
#+end_example

If we have just one dataset, everything can be collapsed

#+begin_example
gp.plot( x,
         unset='grid',
         title='Sample',
         xlabel='X',
         _with = 'lines',
         wait=True)
#+end_example

Or we can use broadcasting and put all the datasets into the same set of arrays:

#+begin_example
gp.plot( nps.cat(x,
                 15. * np.sin(x/5.)),
         unset='grid',
         title='Sample',
         xlabel='X',
         _with = np.array( ('points pt 7 ps 2',
                            'lines')),
         wait=True)
#+end_example

Note that the options broadcast too. Here with put the _with specification into
an array to use a different styling to the two datasets.

Finally, how do we give it data? Each dataset has an explicit tuplesize. With 2D
plots (what we're doing here) the default is tuplesize=2. You're allows to
provide exactly tuplesize arrays (x and y by default) or exactly one fewer: in
this case we use 0,1,2,3... for the "x". This is what we did in these examples.
With 3D plots you can also be two short: we then use an xy grid as the domain.
Useful for height maps.

Let's do something fancier:

#+begin_example
gp.plot( (40 + 15.*np.sin(x/5.), x, dict(_with = 'lines'),),
         (15. * np.sin(x/5.), x*x, dict(_with = 'points pt 7 ps 2 palette',
                                        tuplesize = 3)),
         unset='grid',
         title='Sample',
         xlabel='X',
         square = True,
         wait=True)
#+end_example

Apriltag demo

basic plotting
broadcasting
measuring
self-plotting output



* demo thoughts                                                    :noexport:

apriltags
I see one image
detect
unproject







#!/usr/bin/python3

import numpy as np
import numpysane as nps

x = np.linspace(0, 2, 100)

import matplotlib.pyplot as plt

#plt.plot(x, nps.cat(x,x**2, x**3), label='all')

# plt.plot(x, x, label='linear')
# plt.plot(x, x**2, label='quadratic')
# plt.plot(x, x**3, label='cubic')

# plt.xlabel('x label')
# plt.ylabel('y label')
# plt.title("Simple Plot")
# plt.legend()
# plt.show()


import gnuplotlib as gp

# gp.plot( (x, x,     dict(legend='linear')),
#          (x, x**2., dict(legend='quadratic')),
#          (x, x**3., dict(legend='cubic')),
#          xlabel = 'x label',
#          ylabel = 'y label',
#          title  = 'Simple Plot',
#          _with  = 'lines',
#          terminal = 'qt',
#          wait = 1)


gp.plot( x, nps.cat(x,x**2.,x**3.),
         legend = np.array(('linear','quadratic','cubic')),
         title  = 'Simple Plot',
         _with  = 'lines',
         terminal = 'qt',
         wait = 1)

* todo                                                             :noexport:

tie into feedgnuplot somehow



* emacs notes                                                      :noexport:
apt install texlive-{latex-recommended,latex-extra,pictures}

* init                                                             :noexport:
Local Variables:
eval: (progn
          (require 'ox-beamer)
          (setq org-confirm-babel-evaluate nil)
          (org-babel-do-load-languages
           'org-babel-load-languages
            '((python  . t)))
          (auto-fill-mode))
End:
